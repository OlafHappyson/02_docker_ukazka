name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/your-app

jobs:
  build-and-deploy-staging:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:staging-latest

      - name: Deploy to Staging
        run: |
          echo "Deploying to staging environment"
          ssh user@staging-server "docker pull ${{ env.DOCKER_IMAGE }}:staging-latest && docker-compose up -d"

  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-deploy-staging
    environment: production

    steps:
      - name: Wait for approval
        uses: actions/github-script@v6
        with:
          script: |
            const { createWorkflowDispatch } = require('@octokit/rest');
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split("/");
            const workflow_id = process.env.GITHUB_WORKFLOW;

            const octokit = new createWorkflowDispatch({
              auth: process.env.GITHUB_TOKEN
            });

            await octokit.rest.actions.createWorkflowDispatch({
              owner,
              repo,
              workflow_id,
              ref: 'main',
              inputs: { stage: 'approval' }
            });

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Deploy to Production
        run: |
          echo "Deploying to production environment"
          ssh user@production-server "docker pull ${{ env.DOCKER_IMAGE }}:latest && docker-compose up -d"

permissions:
  actions: write
  contents: write
